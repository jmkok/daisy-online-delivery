<?xml version="1.0" encoding="UTF-8"?>
<definitions name="DAISYOnlineService" xmlns="http://schemas.xmlsoap.org/wsdl/"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:tns="http://www.daisy.org/ns/daisy-online/#" xmlns:db="http://docbook.org/ns/docbook"
	targetNamespace="http://www.daisy.org/ns/daisy-online/#">

	<documentation> Notes on docbook documentation usage: para[role="desc"] is a short core
		definition of the item being described. Plain text can also be used, assuming that no other
		documentation than the core definition is provided within the documentation element. </documentation>

	<types>
		<xsd:schema targetNamespace="http://www.daisy.org/ns/daisy-online/#">
			<xsd:import namespace="http://www.daisy.org/ns/daisy-online/#"
				schemaLocation="do-types-10.xsd"/>
		</xsd:schema>
	</types>

	<!-- ***************************** -->
	<!-- ********  logon/off  ******** -->
	<!-- ***************************** -->

	<message name="logOnRequest">
		<part name="userName" element="xsd:string">
			<documentation>
				<db:para role="desc">The user ID</db:para>
			</documentation>
		</part>
		<part name="password" element="xsd:string">
			<documentation>
				<db:para role="desc">The user password</db:para>
			</documentation>
		</part>
	</message>
	<message name="logOnResponse">
		<part name="result" element="xsd:boolean">
			<documentation>
				<db:para role="desc">Specifies whether the log-on was successful</db:para>
			</documentation>
		</part>
	</message>
	<message name="logOffRequest"/>
	<message name="logOffResponse"/>

	<!-- ***************************** -->
	<!-- ********  bookmarks  ******** -->
	<!-- ***************************** -->

	<message name="setBookmarksRequest">
		<part name="bookmarks" element="tns:bookmarkSet">
			<documentation>
				<db:para role="desc">The bookmarks to store</db:para>
			</documentation>
		</part>
	</message>
	<message name="setBookmarksResponse">
		<part name="result" element="xsd:boolean">
			<documentation>
				<db:para role="desc">Specifies whether the bookmarks for the Publication were saved
					successfully on the Service.</db:para>
			</documentation>
		</part>
	</message>
	<message name="getBookmarksRequest">
		<part name="publicationID" element="xsd:string">
			<documentation>The unique identifier of the Publication for which bookmarks are being
				retrieved</documentation>
		</part>
	</message>
	<message name="getBookmarksResponse">
		<part name="result" element="tns:bookmarkSet">
			<documentation>The bookmarks for the Publication.</documentation>
		</part>
	</message>

	<!-- ******************************** -->
	<!-- ********  issue/return  ******** -->
	<!-- ******************************** -->

	<message name="issueContentRequest">
		<part name="publicationID" element="xsd:string">
			<documentation>
				<db:para role="desc">The unique identifier of the publication that this issuance
					request is for.</db:para>
			</documentation>
		</part>
	</message>
	<message name="issueContentResponse">
		<part name="result" element="xsd:boolean">
			<documentation>
				<db:para role="desc">Specifies whether the content was issued
					successfully.</db:para>
			</documentation>
		</part>
	</message>
	<message name="returnContentRequest">
		<part name="publicationID" element="xsd:string">
			<documentation>
				<db:para role="desc">The unique identifier of the publication that this return
					request is for.</db:para>
			</documentation>
		</part>
	</message>
	<message name="returnContentResponse">
		<part name="result" element="xsd:boolean">
			<documentation>Specifies whether the content was returned successfully.</documentation>
		</part>
	</message>

	<!-- ********************************************* -->
	<!-- ********  Reading System Attributes  ******** -->
	<!-- ********************************************* -->

	<message name="setReadingSystemAttributesRequest">
		<part name="attributes" element="tns:readingSystemAttributes">
			<documentation>
				<db:para role="desc">The Reading System Attributes to post.</db:para>
			</documentation>
		</part>
	</message>
	<message name="setReadingSystemAttributesResponse">
		<part name="result" element="xsd:boolean">
			<documentation>Specifies whether the ReadingSystemAttributes were recieved successfully
				on the Service.</documentation>
		</part>
	</message>


	<!-- ********************************************* -->
	<!-- *************  content list  ************** -->
	<!-- ********************************************* -->
	<message name="getContentListRequest">
		<part name="responses" element="xsd:string">
			<documentation>
				<db:para role="desc">The identity of the list to retrieve.</db:para>
				<db:para>The value <db:varname>default</db:varname> is reserved to refer to a
					default (precomposed) content list; Services must therefore not assign
						<db:varname>default</db:varname> as the identity value of a dynamically
					composed content list.</db:para>
				<db:para>The value <db:varname>borrowed</db:varname> is reserved to refer to a listing
					of the content that is currently borrowed to the User by the Service; Services
					must therefore not assign <db:varname>borrowed</db:varname> as the identity value
					of a dynamically composed content list.</db:para>
				<db:para>TODO explain that this can be used to allow the service to manage the borrowed content list on the users behalf. (Hiro)</db:para>
			</documentation>
		</part>
		<part name="firstItem" element="xsd:integer">
			<documentation>
				<db:para role="desc">The first item to retrieve.</db:para>
			</documentation>
		</part>
		<part name="lastItem" element="xsd:integer">
			<documentation>
				<db:para role="desc">The last item to retrieve.</db:para>
			</documentation>
		</part>
	</message>
	<message name="getContentListResponse">
		<part name="result" element="tns:contentList"/>
	</message>


	<!-- ************************************** -->
	<!-- ********  announcements  ******** -->
	<!-- ************************************** -->

	<message name="getServiceAnnouncementsRequest"/>
	<message name="getServiceAnnouncementsResponse">
		<part name="result" element="tns:announcements"/>
	</message>
	<message name="markAnnouncementsAsReadRequest">
		<part name="read" element="tns:arrayOfID">
			<documentation>
				<db:para role="desc">The announcements to mark as read, expressed as references to
					the announcement's ID values.</db:para>
			</documentation>
		</part>
	</message>
	<message name="markAnnouncementsAsReadResponse">
		<part name="result" element="xsd:boolean">
			<documentation>Specifies whether the specified announcements were successfully marked as
				read on the Service</documentation>
		</part>
	</message>

	<!-- ************************************** -->
	<!-- ********      questions       ******** -->
	<!-- ************************************** -->
	<message name="getQuestionsRequest">
		<part name="responses" element="tns:userResponses">
			<documentation>
				<db:para role="desc">TODO desc</db:para>
				<db:para>The value <db:varname>default</db:varname> is reserved... TODO</db:para>
				<db:para>The value <db:varname>search</db:varname> is reserved... TODO</db:para>
			</documentation>
		</part>
	</message>
	<message name="getQuestionsResponse">
		<part name="result" element="tns:questions"/>
	</message>
	
	
	<!-- ********************************************* -->
	<!-- ****************  metadata  ***************** -->
	<!-- ********************************************* -->

	<message name="getContentMetadataRequest">
		<part name="contentItemID" element="xsd:ID">
			<documentation>
				<db:para role="desc">The identifier of the content for which metadata is being
					requested, as expressed by the <db:varname>id</db:varname> attribute of the
					relevant <db:varname>contentItem</db:varname> in the <db:xref
						linkend="tp_contentList"/> type.</db:para>
			</documentation>
		</part>
	</message>
	<message name="getContentMetadataResponse">
		<part name="result" element="tns:contentMetadata"/>
	</message>

	<!-- ********************************************* -->
	<!-- ******************  PDTB2 ******************* -->
	<!-- ********************************************* -->

	<message name="getKeyExchangeObjectRequest">
		<part name="supportedPublicKeyNames" element="tns:arrayOfString">
			<documentation>
				<db:para role="desc">DOC TODO</db:para>
			</documentation>
		</part>
		<part name="requestedKeyName" element="xsd:string">
			<documentation>
				<db:para role="desc">DOC TODO</db:para>
			</documentation>
		</part>
	</message>
	<message name="getKeyExchangeObjectResponse">
		<part name="result" element="xsd:string">
			<documentation>
				<db:para role="desc">DOC TODO</db:para>
				<db:para role="desc">TODO should return a Key Exchange Object xml fragment</db:para>
			</documentation>
		</part>
	</message>

	<!-- ********************************************* -->
	<!-- *******  Optional Operations Query ********** -->
	<!-- ********************************************* -->

	<message name="getServiceAttributesRequest">
		<documentation>
			<db:para role="desc">DOC TODO</db:para>
		</documentation>
	</message>
	<message name="getServiceAttributesResponse">
		<part name="result" element="tns:serviceAttributes">
			<documentation>
				<db:para role="desc">DOC TODO</db:para>
			</documentation>
		</part>
	</message>

	<portType name="daisy-online">

		<!-- **************************************************** -->
		<!-- *******  operations required for compliance ******** -->
		<!-- **************************************************** -->

		<operation name="logOn">
			<documentation>
				<db:para role="desc">Logs the Reading System on to the Service.</db:para>
			</documentation>
			<input message="tns:logOnRequest"/>
			<output message="tns:logOnResponse"/>
			<fault name="logOnInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="logOnInvalidOperation" message="tns:InvalidOperationFault"/>
		</operation>
		<operation name="logOff">
			<documentation>Logs the Reading System off the Service.</documentation>
			<input message="tns:logOffRequest"/>
			<output message="tns:logOffResponse"/>
			<fault name="logOffInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="logOffNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>

		<operation name="issueContent">
			<documentation>
				<db:para role="desc">Requests the issuance of the specified content</db:para>
			</documentation>
			<input message="tns:issueContentRequest"/>
			<output message="tns:returnContentResponse"/>
			<fault name="issueContentInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="issueContentNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="issueContentInvalidParameter" message="tns:InvalidParameterFault"/>
			<fault name="issueContentInvalidOperation" message="tns:InvalidOperationFault"/>
		</operation>

		<operation name="returnContent">
			<documentation>
				<db:para role="desc">Requests the return of the specified content</db:para>
				<db:para>
					<db:remark role="todo">Define how to handle this in purchase or other no-return
						situations. Does making optional fix it all?</db:remark>
				</db:para>
			</documentation>
			<input message="tns:returnContentRequest"/>
			<output message="tns:returnContentResponse"/>
			<fault name="returnContentInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="returnContentNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="returnContentInvalidParameter" message="tns:InvalidParameterFault"/>
			<fault name="returnContentInvalidOperation" message="tns:InvalidOperationFault"/>
		</operation>

		<operation name="setReadingSystemAttributes">
			<documentation>
				<db:para role="desc">Posts the attributes (characteristics) of the Reading System to
					the Service.</db:para>
				<db:para>This operation must be invoked after a successful <db:xref
						linkend="op_logOn"/> in order to establish the [session ready state] [TODO
					link up]. This operation may be invoked additional times during a session to
					record dynamic changes in the Reading System characteristics. </db:para>
			</documentation>
			<input message="tns:setReadingSystemAttributesRequest"/>
			<output message="tns:setReadingSystemAttributesResponse"/>
			<fault name="setReadingSystemAttributesInternalServerError"
				message="tns:InternalServerErrorFault"/>
			<fault name="setReadingSystemAttributesNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="setReadingSystemAttributesInvalidOperation"
				message="tns:InvalidOperationFault"/>
		</operation>

		<operation name="getContentList">
			<documentation>
				<db:para role="desc">Retrieves a list of available content.</db:para>
				<db:para>The <db:varname>firstItem</db:varname> and
						<db:varname>lastItem</db:varname> parameters are used to request subsets of
					the content list made available by the Service. The first item in the list has
					the index <db:varname>1</db:varname>.</db:para>
				<db:para role="req">TODO note that out-of-range lastItem and firstItem values do not
					constitute Fault matter.</db:para>
			</documentation>
			<input message="tns:getContentListRequest"/>
			<output message="tns:getContentListResponse"/>
			<fault name="getContentListInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getContentListNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="getContentListInvalidOperation" message="tns:InvalidOperationFault"/>
			<fault name="getContentListInvalidParameter" message="tns:InvalidParameterFault"/>
		</operation>

		<operation name="getContentMetadata">
			<documentation>
				<db:para role="desc">Retrieves <db:xref linkend="tp_contentMetadata"/> for the
					specified content.</db:para>
				<db:para role="prereq">This operation is only valid if a previous call to <db:xref
						linkend="op_issueContent"/> with a result of <db:varname>true</db:varname>
					has been made for the given publication.</db:para>

			</documentation>
			<input message="tns:getContentMetadataRequest"/>
			<output message="tns:getContentMetadataResponse"/>
			<fault name="getContentMetadataInternalServerError"
				message="tns:InternalServerErrorFault"/>
			<fault name="getContentMetadataNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="getContentMetadataInvalidOperation" message="tns:InvalidOperationFault"/>
		</operation>

		<operation name="getServiceAttributes">
			<documentation>
				<db:para role="desc">Queries the Service on which optional operations it
					supports.</db:para>
			</documentation>
			<input message="tns:getServiceAttributesRequest"/>
			<output message="tns:getServiceAttributesResponse"/>
			<fault name="getServiceAttributesInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getServiceAttributesNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="getServiceAttributesInvalidOperation" message="tns:InvalidOperationFault"/>
		</operation>


		<!-- ************************************** -->
		<!-- *******  optional operations  ******** -->
		<!-- ************************************** -->

		<operation name="getServiceAnnouncements">
			<documentation>
				<db:para role="desc">Retrieves the announcements awaiting the User's attention from
					the Service.</db:para>
			</documentation>
			<input message="tns:getServiceAnnouncementsRequest"/>
			<output message="tns:getServiceAnnouncementsResponse"/>
			<fault name="getServiceAnnouncementsInternalServerError"
				message="tns:InternalServerErrorFault"/>
			<fault name="getServiceAnnouncementsNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="getServiceAnnouncementsInvalidOperation"
				message="tns:InvalidOperationFault"/>
			<fault name="getServiceAnnouncementsOperationNotSupported"
				message="tns:OperationNotSupportedFault"/>
		</operation>

		<operation name="markAnnouncementsAsRead">
			<documentation>
				<db:para role="desc">Marks the specified announcements as read.</db:para>
				<db:para role="prereq">This operation is only valid if a previous call to <db:xref
						linkend="op_getServiceAnnouncements"/> has been made during the
					session.</db:para>
			</documentation>
			<input message="tns:markAnnouncementsAsReadRequest"/>
			<output message="tns:markAnnouncementsAsReadResponse"/>
			<fault name="markAnnouncementsAsReadInternalServerError"
				message="tns:InternalServerErrorFault"/>
			<fault name="markAnnouncementsAsReadNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="markAnnouncementsAsReadInvalidOperation"
				message="tns:InvalidOperationFault"/>
			<fault name="markAnnouncementsAsReadOperationNotSupported"
				message="tns:OperationNotSupportedFault"/>
		</operation>

		<operation name="setBookmarks">
			<documentation>
				<db:para role="desc">Request the storage of bookmarks for a Publication to the
					Service.</db:para>
				<db:para role="note">Note that the publication identifier is embedded in the
						<db:xref linkend="tp_bookmarkSet"/> type.</db:para>
				<db:para role="note">Note that this operation only supports the storage of bookmarks
					for one publication at a time.</db:para>
			</documentation>
			<input message="tns:setBookmarksRequest"/>
			<output message="tns:setBookmarksResponse"/>
			<fault name="setBookmarksInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="setBookmarksNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="setBookmarksInvalidOperation" message="tns:InvalidOperationFault"/>
			<fault name="setBookmarksOperationNotSupported" message="tns:OperationNotSupportedFault"
			/>
		</operation>
		<operation name="getBookmarks">
			<documentation>
				<db:para role="desc">Retrieves bookmarks for a Publication from the
					Service.</db:para>
			</documentation>
			<input message="tns:getBookmarksRequest"/>
			<output message="tns:getBookmarksResponse"/>
			<fault name="getBookmarksInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getBookmarksNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="getBookmarksInvalidParameter" message="tns:InvalidParameterFault"/>
			<fault name="getBookmarksInvalidOperation" message="tns:InvalidOperationFault"/>
			<fault name="getBookmarksOperationNotSupported" message="tns:OperationNotSupportedFault"
			/>
		</operation>
		<operation name="getQuestions">
			<documentation>
				<db:para role="desc">TODO</db:para>
			</documentation>
			<input message="tns:getQuestionsRequest"/>
			<output message="tns:getQuestionsResponse"/>
			<fault name="getQuestionsInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getQuestionsNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="getQuestionsInvalidOperation" message="tns:InvalidOperationFault"/>
			<fault name="getQuestionsOperationNotSupported" message="tns:OperationNotSupportedFault"/>
		</operation>
		<operation name="getKeyExchangeObject">
			<documentation>
				<db:para role="desc">DOC TODO</db:para>
			</documentation>
			<input message="tns:getKeyExchangeObjectRequest"/>
			<output message="tns:getKeyExchangeObjectResponse"/>
			<fault name="getKeyExchangeObjectInternalServerError"
				message="tns:InternalServerErrorFault"/>
			<fault name="getKeyExchangeObjectNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="getKeyExchangeObjectInvalidOperation" message="tns:InvalidOperationFault"/>
			<fault name="getKeyExchangeObjectOperationNotSupported"
				message="tns:OperationNotSupportedFault"/>
		</operation>

	</portType>

	<!-- ************************************** -->
	<!-- ********        faults        ******** -->
	<!-- ************************************** -->

	<message name="InternalServerErrorFault">
		<documentation>
			<db:para role="desc">An internal server error occurred on the Service and the execution
				of the operation was halted.</db:para>
		</documentation>
	</message>
	<message name="NotAuthorisedFault">
		<documentation>
			<db:para role="desc">The Reading System is not authorised to invoke this operation. TODO
				this may be redundant - use InvalidOperationFault</db:para>
		</documentation>
	</message>
	<message name="InvalidParameterFault">
		<documentation>
			<db:para role="desc">An invalid parameter was passed with the operation
			request.</db:para>
			<part name="invalidParamName" element="xs:string"><db:para role="desc">The name of the invalid parameter</db:para></part>
			<part name="invalidParamValue" element="xs:string"><db:para role="desc">The value of the invalid parameter, serialized as a string</db:para></part>
		</documentation>
	</message>
	<message name="InvalidOperationFault">
		<documentation>
			<db:para role="desc">The current context does not permit a call to this operation. (TODO
				May make NotAuthorisedFault redundant)</db:para>
		</documentation>
	</message>
	<message name="OperationNotSupportedFault">
		<documentation>
			<db:para role="desc">This operation is not supported by the Service.</db:para>
		</documentation>
	</message>
</definitions>
