#summary A report on the testing of the DAISY Online protocol against the requirements and expectations.
#labels Phase-Requirements,Phase-QA,Report,In-Progress

<wiki:toc max_depth="1" />

= Introduction =

This report summarizes the system testing of the protocol, that is, the demonstration of how well the specification fulfils the requirements and expectations.  The requirements come from the modified RequirementsDocument.

= Requirements =

== 1. Efficient use of bandwidth ==

_Example of how this should be filled out_

*Partially fulfilled*

[RequirementsDocument#Efficient_use_of_bandwidth Requirement]

Content transfer usually takes place over HTTP, which is sufficient for transfer of data over the World Wide Web.  The Service creates minimal overhead.

Transfer of audio from the Reading System to the Service takes place over SOAP without MTOM, which adds roughly 37% more to transmission time.

  # *Download content*: Use a Service to find and download an entire Content item.  Ensure that the Content is downloaded in a reasonable amount of time.
  # *Protocol overhead*: In a typical session, measure the ratio of bytes transferred for messages (i.e., over SOAP) vs. bytes transferred for Content (i.e., over plain HTTP/HTTPS).
  # *Audio response*: Send an audio response to a dynamic menu item that supports it.  Ensure that the audio is uploaded in a reasonable amount of time.

|| Test case || Client || Server || Result || Details ||
|| 1.1 || CNIB || !PratSam || *Success* || Transfer of data was at expected rates for binary transfer over the Internet.  A 119 MB book was downloaded in 26 minutes. ||
|| 1.1 || Plextor || VA || *Success* || Transfer of data was at expected rates for binary transfer over the Internet.  An X MB book was downloaded in Y minutes. ||
|| 1.3 || XXX || YYY || *Failure* || Transfer of data was at X% efficiency compared to binary transfer.  Audio of Y MB was uploaded in Z minutes. ||

== 2. Key authorization ==

*Partially fulfilled*

[RequirementsDocument#Key_authorization Requirement]

Authorization occurs by User, not by Reading System; credentials are user names and passwords, not encryption keys. Service Providers intending to authorize Content by individual Reading System will need to use some other mechanism, such as PDTB2.

  # *Connect with authorization*: Initialize a session with a Service using correct user credentials.
  # *Deny incorrect authorization*: Attempt to initialize a session with a Service using a valid user name, but an incorrect password.  The Service must respond `false` to the `logOn` operation, and return a `NoActiveSession` fault to subsequent operation calls.
  # *Allow content download with correct credentials*: Download a resource with basic authentication credentials provided by the Service.
  # *Deny content download with incorrect credentials*: Attempt to download a resource with incorrect basic authentication credentials.  The file server must respond with an HTTP status of "403 Forbidden".

|| Test case || Client || Server || Result || Details ||

== 3. Transmit bookmarks ==

*Untested*

Note: Storing user-created bookmarks is covered under requirement #13, Bookmark stored on server.

[RequirementsDocument#Transmit_bookmarks Requirement]

  # *Retrieve a service provider-created bookmark*: Use `getBookmarks` to retrieve a list of predefined bookmarks from a Service.

|| Test case || Client || Server || Result || Details ||

== 4. Return book ==

*Untested*

[RequirementsDocument#Return_book Requirement]

  # *Return a downloaded book*: Issue and download a Borrowable Content item (i.e. one that requires return) then perform the Reading System's return function.  The Service must return `true`.  Verify that the Content's resources have been removed from the Reading System.
  # *Return a streamed book*: Issue a Borrowable Content item and stream some part of it, then perform the Reading System's return function.  The Service must return `true`.  Verify that the Content's resources are not present on the Reading System.

|| Test case || Client || Server || Result || Details ||

== 5. Transmit capabilities ==

*Untested*

[RequirementsDocument#Transmit_capabilities Requirement]

  # *Set Reading System attributes*: Initialize a session with a Service.  Verify that the Reading System's attributes were sent to the Service.
  # *Adapt Service to the Reading System's capabilities*: Initialize a session with a Service that provides different Content based on the capabilities of the Reading System.  Ensure that the Content and resources offered by the Service are only in the formats given in the `readingSystemAttributes` provided to the Service.

|| Test case || Client || Server || Result || Details ||

== 6. Universal protocol ==

*Untested*

[RequirementsDocument#Universal_protocol Requirement]

  # *Full session*: Perform a full session, from `logOn` to `logOff`.  (This test should be performed with as many combinations of clients and servers as possible.)

|| Test case || Client || Server || Result || Details ||

== 7. Player stores contact information ==

*N/A*

The requirement states that the Reading System must store the Service's contact information.  This is not a requirement as much as it is a declaration that Service Discovery is out of scope.

[RequirementsDocument#Player_stores_contact_information Requirement]

  # *Connect to a new Service*: Add a new Service location and credentials to a Reading System, then connect to the Service with it.  (This is to demonstrate that Service Discovery is not a necessary part of the protocol.)

|| Test case || Client || Server || Result || Details ||

== 8. Content at different location ==

*Untested*

  # *Public remote content*: Issue a Content item which is hosted on a public server that is not affiliated with the Service Provider and does not require authentication.  Download the Content.
  # *Private remote content*: Issue a Content item which is hosted on a public server that is not  at the same host as the Service and requires basic authentication.  Download the Content.

[RequirementsDocument#Content_at_different_location Requirement]

|| Test case || Client || Server || Result || Details ||

== 9. Time interrogation ==

*Partially fulfilled*

[RequirementsDocument#Time_interrogation Requirement]

The ability for Reading Systems to query the Service for the current time was not included in the protocol.  The protocol can provide a due date for Content, and can provide a list of expired Content.

== 10. Download and streaming ==

*Untested*

[RequirementsDocument#Download_and_streaming Requirement]

  # *Download content*: Issue and download a Content item.
  # *Stream content*: Issue a Content item and stream some part of it.

|| Test case || Client || Server || Result || Details ||

== 11. Key delivery ==

*Untested*

[RequirementsDocument#Key_delivery Requirement]

  # *Identify protected Content*: Find a Protected DTB on the Service.  Get the DTB's metadata.  There must be a meta element with a name attribute of "`pdtb2:specVersion`" and a content attribute of "`2005-1`".
  # *Get a key*: Issue and download a Protected DTB.  Request a Key Exchange Object (KXO) for the decryption key from the Service using `getKeyExchangeObject`.  Render the DTB.
  # *Deny a key*: Issue and download a Protected DTB.  Request a KXO for the decryption key from the Service using `getKeyExchangeObject`, but do not provide an authorized key in the `keyRing` argument.  The Service must reply with an `invalidOperation` fault.

|| Test case || Client || Server || Result || Details ||

== 12. Same book, different player ==

*Untested*

[RequirementsDocument#Same_book,_different_player Requirement]

  # *Multiple downloads*: Issue and download a Content item from a Service that allows multiple downloads of the same Content.  Download the same Content item onto another Reading System.
  # *Pick up where you left off*: Issue and download a Content item.  Render the Content up to some point, create a bookmark there and transmit it to the Service.  Return the Content item.  Download the same Content item onto another Reading System.  Get the bookmarks for the Content item.  Start rendering the Content at the point where the bookmark was set earlier.

|| Test case || Client || Server || Result || Details ||

== 13. Bookmark stored on server ==

*Untested*

[RequirementsDocument#Bookmark_stored_on_server Requirement]

  # *Store and retrieve a user-created bookmark*: Create a bookmark for a Content item.  Use `setBookmarks` to transmit the bookmark to a Service.  Use `getBookmarks` to retrieve the bookmark from the Service.

|| Test case || Client || Server || Result || Details ||

== 14. Issue content ==

*Untested*

[RequirementsDocument#Issue_content Requirement]

  # *Issue a book*: Request a Content item from a Service using `issueContent`.  The Service must return `true`.  Get the list of resources using `getContentResources`.
  # *Deny a book*: Request a Content item from a Service using `issueContent`.  The Service must return `false`.  Try to get the list of resources using `getContentResources`.  The Service must return an `invalidOperation` fault.
  # *Pre-requisite book*: _TODO: This needs a test case._

|| Test case || Client || Server || Result || Details ||

== 15. Audio and text annotation ==

*Untested*

[RequirementsDocument#Audio_and_text_annotation Requirement]

  # *Annotated Content list*: Retrieve a Content list with several items from a Service using `getContentList`.  Each item must have a label with both text and audio.

|| Test case || Client || Server || Result || Details ||

== 16. Stop and resume download ==

*Untested*

[RequirementsDocument#Stop_and_resume_download Requirement]

  # *Stop and resume*: Issue a Content item from a Service and get its resource list.  Download part of one file, then stop.  Drop the HTTP connection, then reconnect.  Resume the download, using the HTTP Range header to download only the remaining part of the file.  Download the same file in its entirety and verify that they match.

|| Test case || Client || Server || Result || Details ||

== 17. Dynamic menus ==

*Untested*

[RequirementsDocument#Dynamic_menus Requirement]

|| Test case || Client || Server || Result || Details ||

== 18. Noninteractive session ==

*Untested*

[RequirementsDocument#Noninteractive_session Requirement]

|| Test case || Client || Server || Result || Details ||

== 19. Prioritize order of files ==

*Untested*

[RequirementsDocument#Prioritize_order_of_files Requirement]

|| Test case || Client || Server || Result || Details ||

== 20. Interact with content ==

*Untested*

[RequirementsDocument#Interact_with_content Requirement]

|| Test case || Client || Server || Result || Details ||

== 21. Report firmware version ==

*Untested*

[RequirementsDocument#Report_firmware_version Requirement]

|| Test case || Client || Server || Result || Details ||

== 22. Report download activity ==

*Not fulfilled*

[RequirementsDocument#Report_download_activity Requirement]

The capability for a Reading System to report its own download activity to the Service was not included in the protocol.  Service Providers may track this information for local Content by monitoring their own file servers, and may need to require Service Delegates to report download activity.

  # *Track downloads*: Connect to a Service, then issue and download a Content item.  Verify that file downloads were logged by the Service Provider.

== 23. Report player errors ==

*Not fulfilled*

[RequirementsDocument#Report_player_errors Requirement]

The capability for a Reading System to report errors to the Service was not included in the protocol.

== 24. Report which server is in control ==

*Not fulfilled*

[RequirementsDocument#Report_which_server_is_in_control Requirement]

The capability to report which server is in control was not included in the protocol.

== 25. Protect user privacy ==

*Untested*

[RequirementsDocument#Protect_user_privacy Requirement]

|| Test case || Client || Server || Result || Details ||

== 26. Localized, plain language error messages ==

*Untested*

[RequirementsDocument#Localized,_plain_language_error_messages Requirement]

|| Test case || Client || Server || Result || Details ||

= Expectations =

== 27. Audio feedback ==

*Untested*

[RequirementsDocument#Requires_some_player_functionality Requirement] (never formally moved back in scope)

Sending audio from the Reading System to the Service was originally in scope, then declared out of scope, then was brought back into the specification.

|| Test case || Client || Server || Result || Details ||

= Conclusion =

Of the 26 in-scope requirements, X were fulfilled and Y were partially fulfilled.  Z requirements were left unfulfilled, largely due to time constraints.