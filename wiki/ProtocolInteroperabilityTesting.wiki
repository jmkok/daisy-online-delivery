#summary Interoperability test cases for both Reading Systems and Services.
#labels Phase-QA,Phase-Implementation,Report

<wiki:toc max_depth="3" />

= Introduction =

This report summarizes the interoperability testing of the protocol, that is, the demonstration of independent compatible implementations of each feature in the specification.  These test cases are not comprehensive; in particular, the underlying technologies are not tested.

= Conventions =

Operation calls are represented in a C-like format, e.g. `getContentList(`_listId_`, 0, -1)` represents a call to `getContentList` with parameters _listId_ (a variable—see below), `0` and `-1`.

== Variables ==

To allow for testing with existing Reading Systems and Services, variables are given in _italics_ that may be assigned appropriate values when carrying out the tests.

== Preconditions ==

An initialized session established between the Reading System and the Service is a precondition of every test below except those in sections 4.2.1 and 5.1.1.

Preconditions for individual tests are marked (PRE:).

= 4. Protocol Fundamentals =

== 4.1. Service Models ==

=== 4.1.1. Lending Model ===

=== 4.1.2. Acquisition Model ===

== 4.2. User Authentication and Session Management ==

=== 4.2.1. Session Initialization ===

Variables
  * _user_: A valid username on the Service.
  * _pass_: _user_'s password.
  * _rSA_: A `readingSystemAttributes` object representing the Reading System's attributes.

Tests
  # *Initialize session*: The Reading System connects to the Service.  The Reading System connects to the Service.  The Reading System calls `logOn(`_user_`, `_pass_`)`.  The Service returns `true` and sets a session cookie.  The Reading System calls `getServiceAttributes()`.  The Service returns a valid `serviceAttributes` object.  The Reading System calls `setReadingSystemAttributes(`_rSA_`)`.  The Service returns `true`.

|| Test case || Client || Server || Result || Details ||
|| 4.2.1.1 || — || — || — || Covered in System test 2.1. ||

=== 4.2.2. Session Duration ===

== 4.3. Content Selection Methods ==

=== 4.3.1. Out-of-band Content Selection Method ===

=== 4.3.2. Browse Content Selection Method ===

== 4.4. Issuing and Transfer of Content ==

=== 4.4.1. Content Retrieval Sequence ===

=== 4.4.2. Downloading and Streaming of Content ===

=== 4.4.3. Publishing Updates and Installments ===

=== 4.4.4. Rights management ===

== 4.5. Service Announcements ==

=== 4.5.1. New Announcements ===

=== 4.5.2. Read Announcements ===

== 4.6. Bookmarks ==

== 4.7. Dynamic Menus ==

=== 4.7.1. Support ===

=== 4.7.2. Root Question ===

=== 4.7.3. Navigation ===

=== 4.7.4. Question Types ===

=== 4.7.5. End Points ===

=== 4.7.6. Reserved IDs ===

= 5. API Reference =

== 5.1. Required Operations ==

=== 5.1.1. The `logOn` Operation ===

Variables
  * _user_: A valid username on the Service.
  * _baduser_: A string which is not a valid username on the Service.
  * _pass_: _user_'s password.
  * _badpass_: A string which is not _user_'s password.

Tests
  # *Valid log on*: The Reading System connects to the Service.  The Reading System calls `logOn(`_user_`, `_pass_`)`.  The Service returns `true` and sets a session cookie.
  # *Invalid user*: The Reading System connects to the Service.  The Reading System calls `logOn(`_baduser_`, `_pass_`)`.  The Service returns `false`.
  # *Invalid password*: The Reading System connects to the Service.  The Reading System calls `logOn(`_user_`, `_badpass_`)`.  The Service returns `false`.

|| Test case || Client || Server || Result || Details ||
|| 5.1.1.1 || — || — || — || Covered in System test 2.1. ||
|| 5.1.1.2 || || ||  ||  ||
|| 5.1.1.3 || — || — || — || Covered in System test 2.2. ||

=== 5.1.2. The `logOff` Operation ===

Tests
  # *Log off*: The Reading System calls `logOff()`.  The Service returns `true`.

|| Test case || Client || Server || Result || Details ||
|| 5.1.2.1 || — || — || — || Covered in System tests 6.1 and 25.1. ||

=== 5.1.3. The `setReadingSystemAttributes` Operation ===

Variables
  * _rSA_: A `readingSystemAttributes` object representing the Reading System's attributes.

Tests
  # *Set Reading System attributes*: The Reading System calls `setReadingSystemAttributes(`_rSA_`)`.  The Service returns `true`.

|| Test case || Client || Server || Result || Details ||
|| 5.1.3.1 || — || — || — || Covered in System test 2.1. ||

=== 5.1.4. The `issueContent` Operation ===

Variables
  * _conId_: The identifier of a valid Content item on the Service, which the Service will allow access to.
  * _badId_: A string which is not the identifier of a valid Content item on the Service.
  * _forbId_: The identifier of a valid Content item on the Service, which the Service will not allow access to.

Tests
  # *Issue Content*: The Reading System calls `issueContent(`_conId_`)`.  The Service returns `true`.
  # *Issue invalid Content*: The Reading System calls `issueContent(`_badId_`)`.  The Service returns `false` or throws a fault.
  # *Issue forbidden Content*: The Reading System calls `issueContent(`_forbId_`)`.  The Service returns `false` or throws a fault.

|| Test case || Client || Server || Result || Details ||
|| 5.1.4.1 || — || — || — || Covered in System test 14.1. ||
|| 5.1.4.2 || || ||  ||  ||
|| 5.1.4.3 || — || — || — || Covered in System test 14.2. ||

=== 5.1.5. The `getContentMetadata` Operation ===

Variables
  * _conId_: The identifier of a valid Content item on the Service.
  * _badId_: A string which is not the identifier of a valid Content item on the Service.

Tests
  # *Get Content metadata*: The Reading System calls `getContentMetadata(`_conId_`)`.  The Service returns a valid contentMetadata object, whose `dc:identifier` metadata value equals _conId_.
  # *Get invalid Content metadata*: The Reading System calls `getContentMetadata(`_badId_`)`.  The Service throws an `invalidParameter` fault.

|| Test case || Client || Server || Result || Details ||
|| 5.1.5.1 || — || — || — || Covered in System test 11.1. ||
|| 5.1.5.2 || || ||  ||  ||

=== 5.1.6. The `getContentResources` Operation ===

Variables
  * _conId_: The identifier of a valid Content item on the Service issued to the Reading System's User.
  * _badId_: A string which is not the identifier of a valid Content item on the Service.
  * _forbId_: The identifier of a valid Content item on the Service, which is not issued to the Reading System's User.

Tests
  # *Get Content resources*: The Reading System calls `getContentResources(`_conId_`)`.  The Service returns a valid `contentMetadata` object, whose `dc:identifier` metadata value equals _conId_.
  # *Get invalid Content resources*: The Reading System calls `getContentResources(`_badId_`)`.  The Service throws an `invalidParameter` fault.
  # *Get forbidden Content resources*: The Reading System calls `getContentResources(`_forbId_`)`.  The Service throws an `invalidParameter` fault.

|| Test case || Client || Server || Result || Details ||
|| 5.1.6.1 || — || — || — || Covered in System test 14.1. ||
|| 5.1.6.2 || || ||  ||  ||
|| 5.1.6.3 || — || — || — || Covered in System test 14.2. ||

=== 5.1.7. The `getServiceAttributes` Operation ===

Tests
  # *Get Service attributes*: The Reading System calls `getServiceAttributes()`.  The Service returns a valid `serviceAttributes` object.

|| Test case || Client || Server || Result || Details ||
|| 5.1.7.1 || — || — || — || Covered in System test 2.1. ||

=== 5.1.8. The `getContentList` Operation ===

Variables
  * _listId_: The identifier of a `contentList` on the Service that is not "new", "issued" or "expired".
  * _first_: The index of a `contentItem` in the _listId_ `contentList`, greater than 0.
  * _last_: The index of a `contentItem` in the _listId_ `contentList`, greater than _first_.

Tests
  # *New items*: (PRE: The Service supports Out-of-band Content selection.) The Reading System calls `getContentList("new", 0, -1)`.  The Service returns a `contentList` with the identifier `new`.  No `contentItem`'s `id` is the identifier of an issued Content item.
  # *Issued items*: (PRE: The Service offers some Content under a lending model.) The Reading System calls `getContentList("issued", 0, -1)`.  The Service returns a `contentList` with the identifier `issued`.  Each `contentItem`'s `id` is the identifier of an issued Content item.
  # *Expired items*: (PRE: The Service provides the "expired" `contentList`.) The Reading System calls `getContentList("expired", 0, -1)`.  The Service returns a `contentList` with the identifier `expired`.  Each `contentItem`'s `id` is the identifier of an issued Content item.
  # *Browse items*: (PRE: The Service supports Browse Content selection.) The Reading System calls `getContentList(`_listId_`, 0, -1)`.  The Service returns a `contentList` with the identifier _listId_.
  # *Segmented list*: (PRE: The Service supports Browse Content selection.) The Reading System calls `getContentList(`_listId_`, `_first_`, `_last_`)`.  The Service returns a `contentList` with the identifier _listId_.

|| Test case || Client || Server || Result || Details ||
|| 5.1.8.1 || — || — || — || Covered in System test 18.1. ||
|| 5.1.8.2 || — || — || — || Covered in System test 18.1. ||
|| 5.1.8.3 || — || — || — || Covered in System test 18.1. ||
|| 5.1.8.4 || || ||  ||  ||
|| 5.1.8.5 || || ||  ||  ||

== 5.2. Optional Operations ==

A further precondition for each test in each section in 5.2 is that the given operation is supported by the Service.

=== 5.2.1. The `getServiceAnnouncements` Operation ===

Tests
  # *Get Service announcements*: The Reading System calls `getServiceAnnouncements()`.  The Service returns a valid `announcements` object.

|| Test case || Client || Server || Result || Details ||
|| 5.2.1.1 || — || — || — || Covered in System test 29.1. ||

=== 5.2.2. The `markAnnouncementsAsRead` Operation ===

Variables
  * _readItems_: A valid `read` object, whose `item`s have the values of announcemetns on the Service.

Tests
  # *Mark as read*: The Reading System calls `markAnnouncementsAsRead(`_readItems_`)`.  The Service returns `true`.

|| Test case || Client || Server || Result || Details ||
|| 5.2.2.1 || — || — || — || Covered in System test 29.2. ||

=== 5.2.3. The `returnContent` Operation ===

Variables
  * _conId_: The identifier of a valid borrowable Content item on the Service issued to the Reading System's User.
  * _badId_: A string which is not the identifier of a valid Content item on the Service.
  * _forbId_: The identifier of a valid Content item on the Service, which is not issued to the Reading System's User.

Tests
  # *Return Content*: The Reading System calls `returnContent(`_conId_`)`.  The Service returns `true`.
  # *Return invalid Content*: The Reading System calls `returnContent(`_badId_`)`.  The Service throws an `invalidParameter` fault.
  # *Return Content not in hand*: The Reading System calls `returnContent(`_forbId_`)`.  The Service throws an `invalidParameter` fault.

|| Test case || Client || Server || Result || Details ||
|| 5.2.3.1 || — || — || — || Covered in System tests 4.1 and 4.2. ||
|| 5.2.3.2 || || ||  ||  ||
|| 5.2.3.3 || || ||  ||  ||

=== 5.2.4. The `setBookmarks` Operation ===

Variables
  * _conId_: The identifier of a valid Content item on the Service issued to the Reading System's User.
  * _bmS_: A `bookmarkSet` object whose `uid` element's value is _conId_.

Tests
  # *Set bookmarks*: The Reading System calls `setBookmarks(`_conId_`, `_bmS_`)`.  The Service returns `true`.

|| Test case || Client || Server || Result || Details ||
|| 5.2.4.1 || — || — || — || Covered in System test 13.1. ||

=== 5.2.5. The `getBookmarks` Operation ===

Variables
  * _conId_: The identifier of a valid Content item on the Service issued to the Reading System's User, which has bookmarks available.

Tests
  # *Get bookmarks*: The Reading System calls `getBookmarks(`_conId_`)`.  The Service returns a valid `bookmarkSet` object whose `uid` element's value is _conId_.

|| Test case || Client || Server || Result || Details ||
|| 5.2.5.1 || — || — || — || Covered in System tests 3.1 and 13.1. ||

=== 5.2.6. The `getQuestions` Operation ===

Variables
  * _defaultUR_: A `userResponses` object, with one `userResponse` child whose `questionID` attribute is `default` and has no children.
  * _searchUR_: A `userResponses` object, with one `userResponse` child whose `questionID` attribute is `search` and has no children.
  * _backUR_: A `userResponses` object, with one `userResponse` child whose `questionID` attribute is `back` and has no children.
  * _numericId_: The identifier of an `inputQuestion` on the Service that accepts numeric input.
  * _alphaId_: The identifier of an `inputQuestion` on the Service that accepts alphanumeric input.
  * _audioId_: The identifier of an `inputQuestion` on the Service that accepts audio input.
  * _multiId_: The identifier of a `multipleChoiceQuestion` on the Service whose `allowMultipleSelections` attribute is `false`.
  * _multiMultiId_: The identifier of a `multipleChoiceQuestion` on the Service whose `allowMultipleSelections` attribute is `true` and has multiple `choice` children.
  * _numericUR_: A `userResponses` object, with one `userResponse` child whose `questionID` attribute is _numericId_, whose `value` attribute is a numeric string and has no children.
  * _alphaUR_: A `userResponses` object, with one `userResponse` child whose `questionID` attribute is _alphaId_, whose `value` attribute is an alphanumeric string and has no children.
  * _audioUR_: A `userResponses` object, with one `userResponse` child whose `questionID` attribute is _audioId_ and has one `data` child whose value is a RIFF WAVE binary.
  * _multiUR_: A `userResponses` object, with one `userResponse` child whose `questionID` attribute is _multiId_, whose `value` attribute is a valid response to the `multiId` question and has no children.
  * _multiMultiUR_: A `userResponses` object, with multiple `userResponse` children whose `questionID` attributes are _multiId_, whose `value` attributes are different valid responses to the `multiId` question and have no children.
  * _comboUR_: A `userResponses` object, with four `userResponse` children, namely the `userResponse` children of _numericUR_, _alphaUR_, _audioUR_ and _multiUR_.

Tests
  # *Get the root menu*: The Reading Systems calls `getQuestions(`_defaultUR_`)`.  The Service returns a valid `questions` object.
  # *Get the search menu*: (PRE: The Reading System has called `getQuestions(`_defaultUR_`)` once already in this session.) The Reading Systems calls `getQuestions(`_searchUR_`)`.  The Service returns a valid `questions` object.
  # *Go back*: _TODO: Write this._
  # *Numeric response*: (PRE: _numericId_ is the identifier of an `inputQuestion` returned in some call to `getQuestions` in this session.) The Reading Systems calls `getQuestions(`_numericUR_`)`.  The Service returns a valid `questions` object.
  # *Alphanumeric response*: (PRE: _alphaId_ is the identifier of an `inputQuestion` returned in some call to `getQuestions` in this session.) The Reading Systems calls `getQuestions(`_alphaUR_`)`.  The Service returns a valid `questions` object.
  # *Audio response*: (PRE: _audioId_ is the identifier of an `inputQuestion` returned in some call to `getQuestions` in this session.) The Reading Systems calls `getQuestions(`_audioUR_`)`.  The Service returns a valid `questions` object.
  # *Multiple choice response*: (PRE: _multiId_ is the identifier of a `multipleChoiceQuestion` returned in some call to `getQuestions` in this session.) The Reading Systems calls `getQuestions(`_multiUR_`)`.  The Service returns a valid `questions` object.
  # *Multiple multiple choice response*: (PRE: _multiMultiId_ is the identifier of a `multipleChoiceQuestion` returned in some call to `getQuestions` in this session.) The Reading Systems calls `getQuestions(`_multiMultiUR_`)`.  The Service returns a valid `questions` object.
  # *Combination response*:  (PRE: _numericId_, _alphaId_, _audioId_ and _multiId_ are the identifiers of questions returned in some call to `getQuestions` in this session.) The Reading Systems calls `getQuestions(`_comboUR_`)`.  The Service returns a valid `questions` object.

|| Test case || Client || Server || Result || Details ||
|| 5.2.6.1 || || ||  ||  ||
|| 5.2.6.2 || || ||  ||  ||
|| 5.2.6.3 || || ||  ||  ||
|| 5.2.6.4 || || ||  ||  ||
|| 5.2.6.5 || || ||  ||  ||
|| 5.2.6.6 || || ||  ||  ||
|| 5.2.6.7 || || ||  ||  ||
|| 5.2.6.8 || || ||  ||  ||
|| 5.2.6.9 || || ||  ||  ||

=== 5.2.7. The `getKeyExchangeObject` Operation ===

Variables
  * _goodkey_: The name of a key available on the Service.
  * _badkey_: A string which is not the name of a key available on the Service.
  * _forbkey_: The name of a key available on the Service, which is not permitted to be sent to the Reading System.

Tests
  # *Get a key*: (PRE: In the most recent call to `setReadingSystemAttributes`, the `readingSystemAttributes` object passed included a `keyRing` element with an `item` child whose value is the name of a key (_userkey_) which _goodkey_ is permitted to be encrypted with.) The Reading System calls `getKeyExchangeObject(`_goodkey_`)`.  The Service returns a valid `KeyExchange` object containing _goodkey_ encrypted with _userkey_.
  # *Get an invalid key*: The Reading System calls `getKeyExchangeObject(`_badkey_`)`.  The Service throws an `invalidParameter` fault.
  # *Get a forbidden key*: The Reading System calls `getKeyExchangeObject(`_forbkey_`)`.  The Service throws an `invalidParameter` fault.

|| Test case || Client || Server || Result || Details ||
|| 5.2.7.1 || — || — || — || Covered in System test 11.2. ||
|| 5.2.7.2 || || ||  ||  ||
|| 5.2.7.3 || — || — || — || Covered in System test 11.3. ||