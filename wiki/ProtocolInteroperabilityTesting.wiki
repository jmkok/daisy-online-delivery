#summary Interoperability test cases for both Reading Systems and Services.
#labels Phase-QA,Phase-Implementation,Report

= Introduction =

This report summarizes the interoperability testing of the protocol, that is, the demonstration of independent compatible implementations of each feature in the specification.  These test cases are not comprehensive; in particular, the underlying technologies are not tested.

= Conventions =

Operation calls are represented in a C-like format, e.g. `getContentList(`_listId_`, 0, -1)` represents a call to `getContentList` with parameters _listId_ (a variableâ€”see below), `0` and `-1`.

== Variables ==

To allow for testing with existing Reading Systems and Services, variables are given in _italics_ that may be assigned appropriate values when carrying out the tests.

== Preconditions ==

An active session established between the Reading System and the Service is a precondition of every test below except those in sections 4.2.1 and 5.1.1.

Preconditions for individual tests are marked (PRE:).

= 5. API Reference =

== 5.1. Required Operations ==

=== 5.1.1. The `logOn` Operation ===

Variables
  * _user_: A valid username on the Service.
  * _baduser_: A string which is not a valid username on the Service.
  * _pass_: _user_'s password.
  * _badpass_: A string which is not _user_'s password.

  # *Valid log on*: The RS connects to the Service.  The RS calls `logOn(`_user_`, `_pass_`)`.  The Service returns `true` and sets a session cookie.
  # *Invalid user*: The RS connects to the Service.  The RS calls `logOn(`_baduser_`, `_pass_`)`.  The Service returns `false`.
  # *Invalid password*: The RS connects to the Service.  The RS calls `logOn(`_user_`, `_badpass_`)`.  The Service returns `false`.

=== 5.1.2. The `logOff` Operation ===

  # *Log off*: The RS calls `logOff()`.  The Service returns `true`.

=== 5.1.3. The `setReadingSystemAttributes` Operation ===

Variables
  * _rSA_: A `readingSystemAttributes` object representing the Reading System's attributes.

  # *Set Reading System attributes*: The RS calls `setReadingSystemAttributes(`_rSA_`)`.  The Service returns `true`.

=== 5.1.4. The `issueContent` Operation ===

Variables
  * _conId_: The identifier of a valid Content item on the Service, which the Service will allow access to.
  * _badId_: A string which is not the identifier of a valid Content item on the Service.
  * _forbId_: The identifier of a valid Content item on the Service, which the Service will not allow access to.

  # *Issue Content*: The Reading System calls `issueContent(`_conId_`)`.  The Service returns `true`.
  # *Issue invalid Content*: The Reading System calls `issueContent(`_badId_`)`.  The Service returns `false` or throws a fault.
  # *Issue forbidden Content*: The Reading System calls `issueContent(`_forbId_`)`.  The Service returns `false` or throws a fault.

=== 5.1.5. The `getContentMetadata` Operation ===

Variables
  * _conId_: The identifier of a valid Content item on the Service.
  * _badId_: A string which is not the identifier of a valid Content item on the Service.

  # *Get Content metadata*: The Reading System calls `getContentMetadata(`_conId_`)`.  The Service returns a valid contentMetadata object, whose `dc:identifier` metadata value equals _conId_.
  # *Get invalid Content metadata*: The Reading System calls `getContentMetadata(`_badId_`)`.  The Service throws an `invalidParameter` fault.

=== 5.1.6. The `getContentResources` Operation ===

Variables
  * _conId_: The identifier of a valid Content item on the Service issued to the Reading System's User.
  * _badId_: A string which is not the identifier of a valid Content item on the Service.
  * _forbId_: The identifier of a valid Content item on the Service, which is not issued to the Reading System's User.

  # *Get Content resources*: The Reading System calls `getContentResources(`_conId_`)`.  The Service returns a valid `contentMetadata` object, whose `dc:identifier` metadata value equals _conId_.
  # *Get invalid Content resources*: The Reading System calls `getContentResources(`_badId_`)`.  The Service throws an `invalidParameter` fault.
  # *Get forbidden Content resources*: The Reading System calls `getContentResources(`_forbId_`)`.  The Service throws an `invalidParameter` fault.

=== 5.1.7. The `getServiceAttributes` Operation ===

  # *Get Service attributes*: The Reading System calls `getServiceAttributes()`.  The Service returns a valid `serviceAttributes` object.

=== 5.1.8. The `getContentList` Operation ===

Variables
  * _listId_: The identifier of a `contentList` on the Service that is not "new", "issued" or "expired".
  * _first_: The index of a `contentItem` in the _listId_ `contentList`, greater than 0.
  * _last_: The index of a `contentItem` in the _listId_ `contentList`, greater than _first_.

  # *New items*: (PRE: The Service supports Out-of-band Content selection.) The RS calls `getContentList("new", 0, -1)`.  The Service returns a `contentList` with the identifier `new`.  No `contentItem`'s `id` is the identifier of an issued Content item.
  # *Issued items*: (PRE: The Service offers some Content under a lending model.) The RS calls `getContentList("issued", 0, -1)`.  The Service returns a `contentList` with the identifier `issued`.  Each `contentItem`'s `id` is the identifier of an issued Content item.
  # *Expired items*: (PRE: The Service provides the "expired" `contentList`.) The RS calls `getContentList("expired", 0, -1)`.  The Service returns a `contentList` with the identifier `expired`.  Each `contentItem`'s `id` is the identifier of an issued Content item.
  # *Browse items*: (PRE: The Service supports Browse Content selection.) The RS calls `getContentList(`_listId_`, 0, -1)`.  The Service returns a `contentList` with the identifier _listId_.
  # *Segmented list*: (PRE: The Service supports Browse Content selection.) The RS calls `getContentList(`_listId_`, `_first_`, `_last_`)`.  The Service returns a `contentList` with the identifier _listId_.

== 5.2. Optional Operations ==

=== 5.2.1. The `getServiceAnnouncements` Operation ===

=== 5.2.2. The `markAnnouncementsAsRead` Operation ===

=== 5.2.3. The `returnContent` Operation ===

=== 5.2.4. The `setBookmarks` Operation ===

=== 5.2.5. The `getBookmarks` Operation ===

=== 5.2.6. The `getQuestions` Operation ===

=== 5.2.7. The `getKeyExchangeObject` Operation ===