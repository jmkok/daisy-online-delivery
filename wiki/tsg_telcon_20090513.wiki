#summary TSG telcon 20090513
#labels Phase-Requirements

Present: Simon, Dominic, George, Geoff, Jelle, Nick, Markus (scribe)
Regrets: Kenny

<wiki:toc max_depth="4" />

== Action Item Summary ==
  * @markus register google code site 
  * @markus call for revisit of requirements to online list (preceded by a publish of the latest version in a format all can read), collect incoming for analysis  
  * @geoff draft one or several hypotheses on how the API could be divided in core vs advanced levels (discussion document on google code wiki) 
  * @kenny enter atomic issues reported so far to google code tracker
  * @markus, @kenny draft one or several hypotheses on spec documents reorganization
  * next call: discuss requirements revisit, invite larger group, all must read previous documentation first, @markus send information about telcon to list

==Minutes==

=== Practically ===
_Markus_: suggest we register a project at google code, this gives us:
  * a wiki for swift joint editing of documents
  * a good-enough issue tracker
  * a code repository for schemas, formal specs in XML etc.
  * a publish/download interface

Once everything is done, "formal" deliverables would of course live on daisy.org. This is just to get us a reasonable collaborative platform for the remainder of the process.

_All_: Agree.


=== Thematic outline of what to address ===
A process outline was discussed, with the following core components:

==== Revisit functional requirements ====
_Markus_: It has been mentioned that we should probably revisit the functional requirements that were collected two years ago. A long time has passed and the world has changed. I would suggest we do this, but only on the daisy online list (eg not a new public round). This should be done without regard to the current spec and API; simply asking the question if the requirements document still maps well against current perceived needs.

_Markus_: Note: this is not intended to be a new brainstorm session for new fantastic ideas. The intent is to make a reality-check on the requirements and see if they require sensible modification. I suggest we leave it to the chairs to ultimately measure if the word "sensible" applies to each suggested change. Of course, requirement reduction is also possible.

_Nick_: pointing out that the TSG has done careful analysis of the functional requirements all through the process, and we must make sure to *not* redo all that work. _All agree_.

==== Current API validation ====
Check current feature set against functional requirements, take decision on possible changes to the feature set as a result.

_Markus_: This should be at a thematic level, not about new functions and their names etc. Document at google code wiki.

==== Core vs extended levels ====
_Markus_: Investigate possibility of breaking the API into required and optional modules alternatively a binary: "core" level (required for compliance), and an "extended feature set" level (not required for compliance). We note that maintained full device interoperability is a functional requirement on such a change (any client should be able to work with any server, regardless of how much of the extended feature set the two implement).

_George_: pointing out the risk with optional features, taking Z39.86 resource file as an example. If an optional feature has limited user experience value, it faces the risk of not being implemented, by anyone.

==== Issues reported so far ====
We should start immediately to collect concrete atomic issues reported so far at the google code tracker, but for now wait with addressing them. Thematic abstract issues ("the document is hard to read") need not be added at this point.

==== API finalization ====
_Markus_: Once we have the results of feature set analysis, core vs extended analysis, and atomic issue collection, we should be ready to compose a draft revised API. This can have anything from zero to many changes.

==== Specification document suite ==== 
_Markus_: I suggest we take a look at alternate presentation forms; break what is written so far down into its components, and investigate whether we can rebuild something new using those components, but with a more human parseable presentation form. As an example, perhaps we should visit the idea of not using the ontology+primer approach. Perhaps there should just be one specification document where normative and informative parts are mixed; the XSD and APIs could be summarized in appendices (and API appendix could be autogenerated if we use good enough XML (such as DocBook) and XSLT).

==== Test Harness ====
The group discussed options and routes for test suites. Whats the scope - validating the specification, or validating implementations?

_Geoff_: Ideally, the test harness is about implementation validation; by the time we get here, there should be no further need to validate the specification.

The group took no final decisions re scope and nature of the test harness.