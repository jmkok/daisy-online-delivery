<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="DOML" xmlns="http://www.daisy.org/ns/daisy-online/#"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 targetNamespace="http://www.daisy.org/ns/daisy-online/#" elementFormDefault="qualified"
 xmlns:db="http://docbook.org/ns/docbook" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" attributeFormDefault="unqualified">

 <xs:annotation>
  <xs:documentation xml:lang="en"> This document is the Last Call Working Draft by the DAISY Online
   Delivery Specification Working Group of the DAISY Consortium. Date: 6 May 2009 Editors: Puja
   Dhanetwal, Ben Maslen and Kenny Johar (Vision Australia) </xs:documentation>
 </xs:annotation>

 <xs:import namespace="http://www.w3.org/XML/1998/namespace"
  schemaLocation="http://www.w3.org/2001/xml.xsd"/>

 <xs:import namespace="http://schemas.xmlsoap.org/soap/encoding/"
  schemaLocation="http://schemas.xmlsoap.org/soap/encoding/"/>

 <xs:import namespace="http://schemas.xmlsoap.org/wsdl/"
  schemaLocation="http://schemas.xmlsoap.org/wsdl/"/>

 <xs:element name="readingSystemAttributes">
  <xs:complexType>
   <xs:sequence>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
     <xs:any namespace="##other" processContents="skip"/>
    </xs:choice>

    <xs:element name="manufacturer" type="xs:string" minOccurs="1" maxOccurs="1"/>
    <xs:element name="model" type="xs:string" minOccurs="1" maxOccurs="1"/>
    <xs:element name="serialNumber" type="xs:string" minOccurs="0" maxOccurs="1"/>
    <xs:element name="version" type="xs:string" minOccurs="1" maxOccurs="1"/>

    <xs:element name="config" minOccurs="1" maxOccurs="1">
     <xs:complexType>
      <xs:sequence>
       <xs:element name="supportsMultipleSelections" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
       <xs:element name="supportsGroupedQuestions" type="xs:boolean" minOccurs="1" maxOccurs="1"/>
       <xs:element name="preferredUILanguage" minOccurs="1" maxOccurs="1" type="xs:language">
        <xs:annotation>
         <xs:documentation>
          <db:para>An expression of the user's preferred language of communication with the
           Service.</db:para>
         </xs:documentation>
        </xs:annotation>
       </xs:element>
       <xs:element name="bandwidth" type="xs:int" minOccurs="0" maxOccurs="1">
        <xs:annotation>
         <xs:documentation>
          <db:para>An estimate of the bandwidth that the Reading System allocates for the session,
           expressed in kilobits per second.</db:para>
         </xs:documentation>
        </xs:annotation>
       </xs:element>

       <xs:element name="supportedContentStandards" minOccurs="1" maxOccurs="1">
        <xs:annotation>
         <xs:documentation>
          <db:para>TODO add prose that makes clear this follows the dc:format convention. Add
           informative URIs to daisy2.02 spec and zed specs and epub spec where those particular
           strings are defined.</db:para>
         </xs:documentation>
        </xs:annotation>
        <xs:complexType>
         <xs:sequence>
          <xs:element name="supportedContentStandard" type="xs:string" minOccurs="1"
           maxOccurs="unbounded"/>
         </xs:sequence>
        </xs:complexType>
       </xs:element>

       <xs:element name="supportedContentProtectionStandards" minOccurs="1" maxOccurs="1">
        <xs:annotation>
         <xs:documentation>
          <db:para>DOC TODO</db:para>
         </xs:documentation>
        </xs:annotation>
        <xs:complexType>
         <xs:sequence>
          <xs:element name="supportedContentProtectionStandard" minOccurs="0" maxOccurs="unbounded">
           <xs:simpleType>
            <xs:restriction base="xs:string">
             <xs:enumeration value="PDTB2"/>
            </xs:restriction>
           </xs:simpleType>
          </xs:element>
         </xs:sequence>
        </xs:complexType>
       </xs:element>

       <xs:element name="supportedMimeTypes" minOccurs="1" maxOccurs="1">
        <xs:annotation>
         <xs:documentation>
          <db:para>TODO clarify that this related to content types of both service announcements AND
           content. TODO be clear relates to MIME types that the reading system renders to the user.</db:para>
          <db:para>A Service may use this information to adapt content types offered to the Reading
           System as labels and content.</db:para>
         </xs:documentation>
        </xs:annotation>
        <xs:complexType>
         <xs:sequence>
          <xs:element name="mimeType" minOccurs="1" maxOccurs="unbounded">
           <xs:complexType>
            <xs:attribute name="type" type="xs:string" use="required"/>
            <xs:attribute ref="xml:lang" use="optional"/>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
        </xs:complexType>
       </xs:element>

       <xs:element name="supportedInputTypes" minOccurs="1" maxOccurs="1">
        <xs:annotation>
         <xs:documentation>
          <db:para>Enumerates the means of input that the Reading System supports.</db:para>
          <db:para>If the reading system does not support any means of input, the inputTypes element
           is empty.</db:para>
         </xs:documentation>
        </xs:annotation>
        <xs:complexType>
         <xs:sequence>
          <xs:element name="input" minOccurs="0" maxOccurs="unbounded">
           <xs:complexType>
            <xs:attribute name="type" use="required">
             <xs:simpleType>
              <xs:restriction base="xs:string">
               <xs:enumeration value="TEXT_NUMERIC"/>
               <xs:enumeration value="TEXT_ALPHANUMERIC"/>
               <xs:enumeration value="AUDIO"/>               
              </xs:restriction>
             </xs:simpleType>
            </xs:attribute>
            <xs:attribute ref="xml:lang" use="optional"/>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
        </xs:complexType>
       </xs:element>

       <xs:element name="additionalTransferProtocols" minOccurs="0" maxOccurs="1">
        <xs:annotation>
         <xs:documentation>
          <db:para>The additionalTransferProtocols element contains information about additional
           content transfer protocols that are supported by the reading system, beyond the protocols
           that are mandated by the specification.</db:para>
         </xs:documentation>
        </xs:annotation>
        <xs:complexType>
         <xs:sequence>
          <xs:element name="protocol" minOccurs="1" maxOccurs="unbounded">
           <xs:complexType>
            <xs:simpleContent>
             <xs:extension base="xs:string"> </xs:extension>
            </xs:simpleContent>
           </xs:complexType>
          </xs:element>
         </xs:sequence>
        </xs:complexType>
       </xs:element>
      </xs:sequence>
     </xs:complexType>
    </xs:element>

    <xs:element name="requiresAudioLabels" minOccurs="0" maxOccurs="1">
     <xs:annotation>
      <xs:documentation>
       <db:para role="desc">Specifies whether the Reading System requires audio labels (for service
        announcements and dynamic menu labels). This may occur when a Reading System does not have a
        built-in TTS.</db:para>
       <db:para>If a Service does not support audio labels, it must throw an OperationNotSupported
        Fault on subsequent calls to operations that include label types.</db:para>
      </xs:documentation>
     </xs:annotation>
     <xs:complexType>
      <xs:attribute name="value" type="xs:boolean" use="required"/>
     </xs:complexType>
    </xs:element>

   </xs:sequence>
  </xs:complexType>
 </xs:element>

 <xs:element name="announcements">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="announcement" minOccurs="0" maxOccurs="unbounded">
     <xs:complexType>
      <xs:sequence>
       <xs:element ref="label" minOccurs="1" maxOccurs="1"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID" use="required"/>
      <xs:attribute name="type" type="xs:string" use="optional"/>
      <xs:attribute name="priority" use="optional" default="3">
       <xs:simpleType>
        <xs:restriction base="xs:int">
         <xs:minInclusive value="1"/>
         <xs:maxInclusive value="3"/>
        </xs:restriction>
       </xs:simpleType>
      </xs:attribute>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:complexType>
 </xs:element>

 <xs:element name="label">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="text" type="xs:string" minOccurs="1" maxOccurs="1"/>
    <xs:element name="audio" minOccurs="0" maxOccurs="1">
     <xs:complexType>
      <xs:attribute name="href" type="xs:anyURI" use="required">
       <xs:annotation>
        <xs:documentation>
         <db:para role="desc">Specifies the URI of the audio resource containing the
          label.</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rangeBegin" type="xs:integer" use="optional">
       <xs:annotation>
        <xs:documentation>
         <db:para role="desc">Specifies the audio label start point in bytes counting from the start
          of the resource specified in the href attribute. If the rangeBegin attribute is not
          present, this implies a rangeBegin of 0.</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rangeEnd" type="xs:integer" use="optional">
       <xs:annotation>
        <xs:documentation>
         <db:para role="desc">Specifies the audio label end point in bytes counting from the start
          of the resource specified in the href attribute. If the rangeEnd attribute is not present,
          this implies a rangeEnd value set to the last byte of the resource specificed in the href
          attribute.</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
      <xs:attribute name="size" type="xs:int" use="required">
       <xs:annotation>
        <xs:documentation>
         <db:para role="desc">Specifies the size (in bytes) of the label audio data.</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
   <xs:attribute ref="xml:lang">
    <xs:annotation>
     <xs:documentation>
      <db:para role="desc">Specifices the language of the label.</db:para>
     </xs:documentation>
    </xs:annotation>
   </xs:attribute>
  </xs:complexType>
 </xs:element>

 <xs:element name="contentMetadata">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="sample" minOccurs="0" maxOccurs="1">
     <xs:complexType>
      <xs:sequence>
       <xs:element ref="label" minOccurs="1" maxOccurs="unbounded"/>
      </xs:sequence>
     </xs:complexType>
    </xs:element>

    <xs:element name="contentStandard" type="xs:string" minOccurs="1" maxOccurs="1"/>

    <xs:element name="provider" minOccurs="0" maxOccurs="1">
     <xs:complexType>
      <!-- TODO define how the id is made up: what is the reading systems use of it? -->
      <xs:attribute name="id" type="xs:string" use="required"/>
     </xs:complexType>
    </xs:element>

    <xs:element name="service" minOccurs="0" maxOccurs="1">
     <xs:complexType>
      <!-- TODO define how the id is made up; what is the reading systems use of it? -->
      <xs:attribute name="id" type="xs:string" use="required"/>
     </xs:complexType>
    </xs:element>

    <xs:element name="metadata" minOccurs="0" maxOccurs="1">
     <xs:complexType>
      <xs:sequence>
       <!-- TODO should we use dublin core -->
       <!-- what about audio versions of metadata, serviceid and providerid -->
       <!-- note: no markup allowed in text nodes -->
       <xs:element name="title" type="xs:string" minOccurs="1" maxOccurs="1"/>
       <xs:element name="size" type="xs:int" minOccurs="1" maxOccurs="1"/>
       <xs:element name="author" type="xs:string" minOccurs="0" maxOccurs="1"/>
       <xs:element name="genre" type="xs:string" minOccurs="0" maxOccurs="1"/>
       <xs:element name="publisher" type="xs:string" minOccurs="0" maxOccurs="1"/>
       <xs:element name="narrator" type="xs:string" minOccurs="0" maxOccurs="1"/>
       <xs:element name="language" type="xs:string" minOccurs="0" maxOccurs="1"/>
       <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1"/>
       <!-- TODO 0-1 elements in pdtb namespace with specVersion -->
       <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any namespace="##other" processContents="lax"/>
       </xs:choice>
      </xs:sequence>
     </xs:complexType>
    </xs:element>

    <xs:element name="resources" minOccurs="1" maxOccurs="1">
     <xs:annotation>
      <xs:documentation>
       <db:para>A list of all the files that constitute the publication.</db:para>
      </xs:documentation>
     </xs:annotation>
     <xs:complexType>
      <xs:sequence>
       <xs:element name="resource" minOccurs="1" maxOccurs="unbounded">
        <xs:complexType>
         <xs:attribute name="href" type="xs:anyURI" use="required"/>
         <xs:attribute name="mimeType" type="xs:string" use="required">
          <!-- TODO add note that PDTB2 mimetypes should be used -->
          <!-- TODO stay silent on 2.02 Mime types? Those are not specified anywhere -->
          <xs:annotation>
           <xs:documentation>
            <db:para>The MIME type of the resource.</db:para>
           </xs:documentation>
          </xs:annotation>
         </xs:attribute>
         <xs:attribute name="size" type="xs:int" use="required">
          <xs:annotation>
           <xs:documentation>
            <db:para>The size of the resource in bytes.</db:para>
           </xs:documentation>
          </xs:annotation>
         </xs:attribute>
         <xs:attribute name="localFileName" type="xs:string" use="required">
          <xs:annotation>
           <xs:documentation>
            <db:para>The local file name of the resource.</db:para>
           </xs:documentation>
          </xs:annotation>
         </xs:attribute>
        </xs:complexType>
       </xs:element>
      </xs:sequence>
     </xs:complexType>
    </xs:element>
   </xs:sequence>

   <xs:attribute name="id" type="xs:string" use="required"/>

   <xs:attribute name="category" use="optional">
    <xs:simpleType>
     <xs:restriction base="xs:string">
      <xs:enumeration value="BOOK"/>
      <xs:enumeration value="MAGAZINE"/>
      <xs:enumeration value="NEWSPAPER"/>
      <xs:enumeration value="OTHER"/>
     </xs:restriction>
    </xs:simpleType>
   </xs:attribute>

   <xs:attribute name="borrowed" type="xs:boolean" use="required">
    <!-- TODO may make optional and specify value if so -->
    <xs:annotation>
     <xs:documentation>
      <db:para>Specifies whether the Service requires this content to be returned.</db:para>
     </xs:documentation>
    </xs:annotation>
   </xs:attribute>

  </xs:complexType>
 </xs:element>

 <xs:element name="contentList">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="contentItem" minOccurs="0" maxOccurs="unbounded">
     <xs:complexType>
      <xs:sequence>
       <xs:element ref="label" minOccurs="1" maxOccurs="1">
        <xs:annotation>
         <xs:documentation>
          <db:para>The title, or other descriptive text, of this contentItem.</db:para>
         </xs:documentation>
        </xs:annotation>
       </xs:element>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID" use="required">
       <xs:annotation>
        <xs:documentation>
         <db:para>The ID of this contentItem, unique within the contentList.</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
      <xs:attribute name="totalItems" type="xs:integer" use="required">
       <xs:annotation>
        <xs:documentation>
         <db:para>The total number of content items exposed by the Service at this stage of the
          session. This instance of <db:varname>contentList</db:varname> may only contain a subset
          of the total number of items.</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
      <xs:attribute name="firstItem" type="xs:integer" use="required">
       <xs:annotation>
        <xs:documentation>
         <db:para>The first content item provided in this instance of contentList.</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lastItem" type="xs:integer" use="required">
       <xs:annotation>
        <xs:documentation>
         <db:para>The last content item provided in this instance of contentList.</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:complexType>
 </xs:element>

 <xs:element name="bookmarkSet">
  <xs:complexType>
   <xs:sequence>
    <!--<xs:element ref="title" />-->
    <xs:element name="title">
     <xs:complexType>
      <xs:sequence>
       <!--<xs:element ref="text" />-->
       <xs:element name="text">
        <xs:complexType mixed="true"/>
       </xs:element>
       <!--<xs:element ref="audio" minOccurs="0" />-->
       <xs:element name="audio">
        <xs:complexType>
         <xs:attribute name="src" form="unqualified" type="xs:string"/>
         <xs:attribute name="clipBegin" form="unqualified" type="xs:string"/>
         <xs:attribute name="clipEnd" form="unqualified" type="xs:string"/>
        </xs:complexType>
       </xs:element>
      </xs:sequence>
     </xs:complexType>
    </xs:element>
    <!--<xs:element ref="uid" />-->
    <xs:element name="uid">
     <xs:complexType mixed="true"/>
    </xs:element>
    <!--<xs:element ref="lastmark" minOccurs="0" />-->
    <xs:element name="lastmark">
     <xs:complexType>
      <xs:sequence>
       <xs:element name="ncxRef">
        <xs:complexType mixed="true"/>
       </xs:element>
       <!--<xs:element ref="ncxRef" />-->
       <!--<xs:element ref="URI" />-->
       <xs:element name="URI">
        <xs:complexType mixed="true"/>
       </xs:element>
       <xs:choice>
        <xs:sequence>
         <xs:element name="timeOffset">
          <xs:complexType mixed="true"/>
         </xs:element>
         <!--<xs:element ref="charOffset" minOccurs="0" />-->
         <xs:element name="charOffset" minOccurs="1">
          <xs:complexType mixed="true"/>
         </xs:element>
        </xs:sequence>
        <!--<xs:element ref="charOffset" />-->
       </xs:choice>
      </xs:sequence>
     </xs:complexType>
    </xs:element>
    <xs:choice>
     <!--<xs:element ref="bookmark" />-->
     <xs:element name="bookmark">
      <xs:complexType>
       <xs:sequence>
        <xs:element name="ncxRef">
         <xs:complexType mixed="true"/>
        </xs:element>
        <!--<xs:element ref="ncxRef" />-->
        <xs:element name="URI">
         <xs:complexType mixed="true"/>
        </xs:element>
        <!--<xs:element ref="URI" />-->
        <xs:choice>
         <xs:sequence>
          <xs:element name="timeOffset">
           <xs:complexType mixed="true"/>
          </xs:element>
          <!--<xs:element ref="charOffset" minOccurs="0" />-->
          <xs:element name="charOffset">
           <xs:complexType mixed="true"/>
          </xs:element>
         </xs:sequence>
         <!--<xs:element ref="charOffset" />-->
        </xs:choice>
        <!--<xs:element ref="note" minOccurs="0" />-->
        <xs:element name="note">
         <xs:complexType>
          <xs:sequence>
           <xs:element name="text" type="xs:string" minOccurs="0"/>
           <!--<xs:element ref="audio" minOccurs="0" maxOccurs="unbounded" />-->
           <xs:element name="audio">
            <xs:complexType>
             <xs:attribute name="src" form="unqualified" type="xs:string"/>
             <xs:attribute name="clipBegin" form="unqualified" type="xs:string"/>
             <xs:attribute name="clipEnd" form="unqualified" type="xs:string"/>
            </xs:complexType>
           </xs:element>
          </xs:sequence>
         </xs:complexType>
        </xs:element>

       </xs:sequence>
       <xs:attribute name="label" type="xs:string" use="optional"/>
      </xs:complexType>
     </xs:element>
     <!--<xs:element ref="hilite" />-->
     <xs:element name="hilite">
      <xs:complexType>
       <xs:sequence>
        <!--<xs:element ref="hiliteStart" />-->
        <xs:element name="hiliteStart">
         <xs:complexType>
          <xs:sequence>
           <xs:element name="ncxRef">
            <xs:complexType mixed="true"/>
           </xs:element>
           <!--<xs:element ref="ncxRef" />-->
           <!--<xs:element ref="URI" />-->
           <xs:element name="URI">
            <xs:complexType mixed="true"/>
           </xs:element>
           <xs:choice>
            <xs:sequence>
             <xs:element name="timeOffset">
              <xs:complexType mixed="true"/>
             </xs:element>
             <!--<xs:element ref="charOffset" minOccurs="0" />-->
             <xs:element name="charOffset" minOccurs="1">
              <xs:complexType mixed="true"/>
             </xs:element>
            </xs:sequence>
            <!--<xs:element ref="charOffset" />-->

           </xs:choice>
          </xs:sequence>
         </xs:complexType>
        </xs:element>
        <!--<xs:element ref="hiliteEnd" />-->
        <xs:element name="hiliteEnd">
         <xs:complexType>
          <xs:sequence>
           <xs:element name="ncxRef">
            <xs:complexType mixed="true"/>
           </xs:element>
           <!--<xs:element ref="ncxRef" />-->
           <!--<xs:element ref="URI" />-->
           <xs:element name="URI">
            <xs:complexType mixed="true"/>
           </xs:element>
           <xs:choice>
            <xs:sequence>
             <xs:element name="timeOffset">
              <xs:complexType mixed="true"/>
             </xs:element>
             <!--<xs:element ref="charOffset" minOccurs="0" />-->
             <xs:element name="charOffset" minOccurs="1">
              <xs:complexType mixed="true"/>
             </xs:element>
            </xs:sequence>

           </xs:choice>
          </xs:sequence>
         </xs:complexType>
        </xs:element>
        <!--<xs:element ref="note" minOccurs="0" />-->
        <xs:element name="note">
         <xs:complexType>
          <xs:sequence>
           <xs:element name="text" type="xs:string" minOccurs="0"/>
           <!--<xs:element ref="audio" minOccurs="0" maxOccurs="unbounded" />-->
           <xs:element name="audio">
            <xs:complexType>
             <xs:attribute name="src" form="unqualified" type="xs:string"/>
             <xs:attribute name="clipBegin" form="unqualified" type="xs:string"/>
             <xs:attribute name="clipEnd" form="unqualified" type="xs:string"/>
            </xs:complexType>
           </xs:element>
          </xs:sequence>
         </xs:complexType>
        </xs:element>
       </xs:sequence>
       <xs:attribute name="label" type="xs:string" use="optional"/>
      </xs:complexType>
     </xs:element>
    </xs:choice>
   </xs:sequence>
  </xs:complexType>
 </xs:element>

 <xs:element name="question">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="inputTypes" minOccurs="0" maxOccurs="1">
     <xs:annotation><xs:documentation>
       <db:para>Specifies which input types the service is prepared 
        to accept as a response to this question.
       </db:para>
     </xs:documentation></xs:annotation>
     <xs:complexType>
      <xs:sequence>
       <xs:element name="input" minOccurs="1" maxOccurs="unbounded">
        <xs:complexType>
         <xs:attribute name="type" use="required">
          <xs:simpleType>           
           <xs:restriction base="xs:string">
            <xs:enumeration value="AUDIO"/>
            <xs:enumeration value="TEXT_NUMERIC"/>
            <xs:enumeration value="TEXT_ALPHANUMERIC"/>
           </xs:restriction>
          </xs:simpleType>
         </xs:attribute>
        </xs:complexType>
       </xs:element>
      </xs:sequence>
     </xs:complexType>
    </xs:element>
    <xs:element ref="label" minOccurs="1" maxOccurs="unbounded"/>
   </xs:sequence>
   <xs:attribute name="id" type="xs:ID" use="required"/>
  </xs:complexType>
 </xs:element>

 <xs:element name="questions">
  <!-- either exactly one contentList as direct descendant of GQ, or a label, or any combination, and cardinality 
   of multipleChoice and textInputQuestion -->
  <xs:complexType>
   <xs:choice>
    <xs:sequence>
     <xs:element name="question" minOccurs="1" maxOccurs="unbounded">
      <xs:complexType>
       <xs:sequence>
        <xs:choice>
         <xs:element ref="multipleChoiceQuestion" minOccurs="1" maxOccurs="1" /> 
         <xs:element ref="question" minOccurs="1" maxOccurs="1" />
        </xs:choice>
       </xs:sequence>
      </xs:complexType>
     </xs:element>
    </xs:sequence>
    <!-- TODO add doc that these below returns are "endpoints" -->
    <xs:element ref="contentList" minOccurs="1" maxOccurs="1"/>
    <xs:element ref="label" minOccurs="1" maxOccurs="1"/>
   </xs:choice>
  </xs:complexType>
 </xs:element>

 <xs:element name="multipleChoiceQuestion">
  <xs:complexType>
   <xs:sequence>
    <xs:element ref="label" minOccurs="1" maxOccurs="1"/>
    <xs:element name="choices" minOccurs="1" maxOccurs="1">
     <xs:complexType>
      <xs:sequence>
       <xs:element name="choice" minOccurs="1" maxOccurs="unbounded">
        <xs:complexType>
          <xs:sequence>
          <xs:element ref="label" minOccurs="1" maxOccurs="1"/>
          </xs:sequence>
          <xs:attribute name="id" type="xs:ID"/>
        </xs:complexType>
       </xs:element>     
      </xs:sequence>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
   <xs:attribute name="id" type="xs:ID"/>
   <xs:attribute name="allowMultipleSelections" type="xs:boolean" use="optional"/>
  </xs:complexType>
 </xs:element>

 <xs:element name="userResponses">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="userResponse" minOccurs="1" maxOccurs="unbounded">
     <xs:annotation>
      <xs:documentation>
       <db:para>A singular response to a question. Either the value attribute
       (for text-based responses) or the data attribute (for audio-based responses) must be present.</db:para>
      </xs:documentation>
     </xs:annotation>
     <xs:complexType>
      <xs:attribute name="id" type="xs:ID" use="required">
       <xs:annotation>
        <xs:documentation>
         <db:para>The ID of the question being answered</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value" type="xs:string" use="optional"/>
      <xs:attribute name="data" use="optional">
       <xs:annotation>
        <xs:documentation>
         <db:para>TODO specify that WAV is required, other codecs supported by the service declared by getServiceCharacteristics. TODO add note that MTOM is not allowed.</db:para>
        </xs:documentation>
       </xs:annotation>
       <xs:simpleType>
        <xs:restriction base="xs:base64Binary" /> 
       </xs:simpleType>
      </xs:attribute>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:complexType>
 </xs:element>

 <!--
 <xs:element name="nextOperation" nillable="true">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="operation" minOccurs="1" maxOccurs="1"/>
    <xs:element name="param" minOccurs="0" maxOccurs="unbounded">
     <xs:complexType>
      <xs:attribute name="name" use="required"/>
      <xs:attribute name="value" use="required"/>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
-->
 <xs:element name="optionalOperations">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="operation" minOccurs="0" maxOccurs="unbounded">
     <xs:annotation>
      <xs:documentation>
       <db:para role="desc">A symbolic name for an optional operation or logical group of optional
        operations. TODO change to serverCharacteristics, generalize, add support for supportsSearch, 
        supportsServerSideBack, additionalUploadAudioCodecs</db:para>
      </xs:documentation>
     </xs:annotation>
     <xs:complexType>
      <xs:attribute name="type" use="required">
       <xs:annotation>
        <xs:documentation>
         <db:para>This specification defines the values as per the list below.</db:para>
         <db:para>By setting the type attribute to the value EXTENSION, other values may be
          introduced in the extension attribute to refer to other, application-specific, optional
          operations.</db:para>
         <db:para>TODO write below the list that defines which operations map to the enum values;
          xslt may not do enums.</db:para>
        </xs:documentation>
       </xs:annotation>
       <xs:simpleType>
        <xs:restriction base="xs:string">
         <xs:enumeration value="SET_BOOKMARKS"/>
         <xs:enumeration value="GET_BOOKMARKS"/>
         <xs:enumeration value="DYNAMIC_MENUS"/>
         <xs:enumeration value="SERVICE_ANNOUNCEMENTS"/>
         <xs:enumeration value="PDTB2_KEY_PROVISION"/>
         <xs:enumeration value="EXTENSION"/>
        </xs:restriction>
       </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="extension" use="optional" type="xs:string">
       <xs:annotation>
        <xs:documentation>
         <db:para>The value of an extension. This attribute is only relevant when the
           <db:varname>type</db:varname> attribute value is
          <db:varname>EXTENSION</db:varname>.</db:para>
        </xs:documentation>
       </xs:annotation>
      </xs:attribute>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
  </xs:complexType>
 </xs:element>

 <xs:element name="arrayOfString">
  <xs:complexType>
   <xs:complexContent>
    <xs:restriction base="SOAP-ENC:Array">
     <xs:sequence>
      <xs:element name="item" type="xs:string" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
     </xs:sequence>
     <xs:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="xs:string[]"/>
    </xs:restriction>
   </xs:complexContent>
  </xs:complexType>
 </xs:element>

 <xs:element name="arrayOfID">
  <xs:complexType>
   <xs:complexContent>
    <xs:restriction base="SOAP-ENC:Array">
     <xs:sequence>
      <xs:element name="item" type="xs:ID" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
     </xs:sequence>
     <xs:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="xs:ID[]"/>
    </xs:restriction>
   </xs:complexContent>
  </xs:complexType>
 </xs:element>

</xs:schema>
