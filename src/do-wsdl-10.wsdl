<?xml version="1.0" encoding="UTF-8"?>
<definitions name="DAISYOnlineService" xmlns="http://schemas.xmlsoap.org/wsdl/"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:tns="http://www.daisy.org/ns/doml#" xmlns:db="http://docbook.org/ns/docbook"
	targetNamespace="http://www.daisy.org/ns/doml#">

	<documentation> Notes on docbook documentation usage: para[role="desc"] is a short core
		definition of the item being described. Plain text can also be used, assuming that no other
		documentation than the core definition is provided within the documentation element. </documentation>

	<types>
		<xsd:schema targetNamespace="http://www.daisy.org/ns/doml#">
			<xsd:import namespace="http://www.daisy.org/ns/doml#" schemaLocation="do-types-10.xsd"/>
		</xsd:schema>
	</types>

	<!-- ***************************** -->
	<!-- ********  logon/off  ******** -->
	<!-- ***************************** -->

	<message name="logOnRequest">
		<part name="userName" element="xsd:string">
			<documentation>
				<db:para role="desc">The user ID</db:para>
			</documentation>
		</part>
		<part name="password" element="xsd:string">
			<documentation>
				<db:para role="desc">The user password</db:para>
			</documentation>
		</part>
	</message>
	<message name="logOnResponse">
		<part name="result" element="xsd:boolean">
			<documentation>
				<db:para role="desc">Signifies whether the log-on was successful</db:para>
			</documentation>
		</part>
	</message>
	<message name="logOffRequest"/>
	<message name="logOffResponse"/>

	<!-- ***************************** -->
	<!-- ********  bookmarks  ******** -->
	<!-- ***************************** -->

	<message name="setBookmarksRequest">
		<part name="bookmarks" element="tns:bookmarkSet">
			<documentation>
				<db:para role="desc">The bookmarks to store</db:para>
			</documentation>
		</part>
	</message>
	<message name="setBookmarksResponse">
		<part name="result" element="xsd:boolean">
			<documentation>
				<db:para role="desc">Signifies whether the bookmarks for the Publication were saved
					successfully on the Service.</db:para>
			</documentation>
		</part>
	</message>
	<message name="getBookmarksRequest">
		<part name="publicationID" element="xsd:string">
			<documentation>The unique identifier of the Publication for which bookmarks are being
				retrieved</documentation>
		</part>
	</message>
	<message name="getBookmarksResponse">
		<part name="result" element="tns:bookmarkSet">
			<documentation>The bookmarks for the Publication.</documentation>
		</part>
	</message>

	<!-- ******************************** -->
	<!-- ********  issue/return  ******** -->
	<!-- ******************************** -->

	<message name="issueContentRequest">
		<part name="publicationID" element="xsd:string">
			<documentation>
				<db:para role="desc">The unique identifier of the publication that this issuance
					request is for.</db:para>
			</documentation>
		</part>
	</message>
	<message name="issueContentResponse">
		<part name="result" element="xsd:boolean">
			<documentation>
				<db:para role="desc">Signifies whether the content was issued
					successfully.</db:para>
			</documentation>
		</part>
	</message>
	<message name="returnContentRequest">
		<part name="publicationID" element="xsd:string">
			<documentation>
				<db:para role="desc">The unique identifier of the publication that this return
					request is for.</db:para>
			</documentation>
		</part>
	</message>
	<message name="returnContentResponse">
		<part name="result" element="xsd:boolean">
			<documentation>Signifies whether the content was returned successfully.</documentation>
		</part>
	</message>

	<!-- ********************************************* -->
	<!-- ********  Reading System Attributes  ******** -->
	<!-- ********************************************* -->

	<message name="setReadingSystemAttributesRequest">
		<part name="attributes" element="tns:readingSystemAttributes">
			<documentation>
				<db:para role="desc">The Reading System attributes to post.</db:para>
			</documentation>
		</part>
	</message>
	<message name="setReadingSystemAttributesResponse">
		<part name="result" element="xsd:boolean">
			<documentation>Signifies whether the ReadingSystemAttributes were recieved successfully
				on the Service.</documentation>
		</part>
	</message>

	<!-- ********************************************* -->
	<!-- *****************  dateTime  **************** -->
	<!-- ********************************************* -->

	<message name="getDateTimeRequest"/>
	<message name="getDateTimeResponse">
		<part name="result" element="xsd:dateTime">
			<documentation>
				<db:para role="desc">The current date and time at the location of the
					server.</db:para>
				<db:para role="req">A timezone identifier and a granularity to one second are both
					required.</db:para>
			</documentation>
		</part>
	</message>

	<!-- ********************************************* -->
	<!-- *************  content list  ************** -->
	<!-- ********************************************* -->
	<message name="getContentListRequest">
		<part name="responses" element="xsd:string">
			<documentation>
				<db:para role="desc">The identity of the list to retrieve. The value
						<db:varname>default</db:varname> is reserved to refer to a default
					(precomposed) content list; Services must therefore not assign <db:varname>default</db:varname> as 
					the identity value of a dynamically composed content list.</db:para>
			</documentation>
		</part>
	</message>
	<message name="getContentListResponse">
		<part name="result" element="tns:contentList" /> 
	</message>


	<!-- ************************************** -->
	<!-- ********  announcements  ******** -->
	<!-- ************************************** -->
	
	<message name="getServiceAnnouncementsRequest" />
	<message name="getServiceAnnouncementsResponse">
		<part name="result" element="tns:announcements" />
	</message>
	<message name="markAnnouncementsAsReadRequest">
		<part name="rangeBegin" element="xsd:integer">
			<documentation><db:para>The first announcement to mark as read, expressed as the value of the announcement's 
				<db:varname>sequenceID</db:varname> attribute value</db:para></documentation>
		</part>
		<part name="rangeEnd" element="xsd:integer">
			<documentation><db:para>The last announcement to mark as read, expressed as the value of the announcement's 
				<db:varname>sequenceID</db:varname> attribute value</db:para></documentation>
		</part>		
	</message>
	<message name="markAnnouncementsAsReadResponse">
		<part name="result" element="xsd:boolean">
			<documentation>Signifies whether the specified announcements were successfully marked as read on the Service</documentation>
		</part>
	</message>
	
	<!-- ************************************** -->
	<!-- ********      questions       ******** -->
	<!-- ************************************** -->
	
	<message name="getQuestionRequest">
		<part name="questionID" element="xsd:string">
			<documentation>
				<db:para role="desc">TODO</db:para>
			</documentation>
		</part>	
	</message>
	<message name="getQuestionResponse">
		<part name="response" element="tns:question"/>
	</message>
	<message name="getMultipleChoiceQuestionRequest">
		<part name="questionID" element="xsd:string">
			<documentation>
				<db:para role="desc">TODO</db:para>
			</documentation>
		</part>		
	</message>
	<message name="getMultipleChoiceQuestionResponse">
		<part name="response" element="tns:multipleChoiceQuestion"/>
	</message>
	<message name="getGroupedQuestionsRequest">
		<part name="groupID" element="xsd:string">
			<documentation>
				<db:para role="desc">TODO</db:para>
			</documentation>
		</part>	
	</message>
	<message name="getGroupedQuestionsResponse">
		<part name="response" element="tns:groupedQuestions"/>
	</message>
	<message name="getMessageRequest">
		<part name="messageID" element="xsd:string">
			<documentation>
				<db:para role="desc">TODO</db:para>
			</documentation>
		</part>
	</message>
	<message name="getMessageResponse">
		<part name="response" element="tns:message"/>
	</message>

	<!-- ********************************************* -->
	<!-- *************  user responses  ************** -->
	<!-- ********************************************* -->
	<message name="setUserResponsesRequest">
		<part name="responses" element="tns:userResponses">
			<documentation>
				<db:para role="desc">The response to a previous question.</db:para>
			</documentation>
		</part>
	</message>
	<message name="setUserResponsesResponse">
		<part name="result" element="tns:nextOperation">
			<documentation>
				<db:para role="desc">The operation (possibly including parameters) that the reading
					system should call next. May be null.</db:para>
			</documentation>
		</part>
	</message>
	
	<!-- ********************************************* -->
	<!-- *************  metadata  ************** -->
	<!-- ********************************************* -->
	
	<message name="getContentMetadataRequest">
		<part name="publicationID" element="xsd:string">
			<documentation>
				<db:para role="desc">The identifier of the publication for which the metadata is being requested, 
					as expressed by the <db:varname>id</db:varname> attribute of the relevant <db:varname>contentItem</db:varname> in 
					the <db:xref linkend="tp_contentList"/> type.</db:para>
			</documentation>
		</part>
	</message>
	
	<message name="getContentMetadataResponse">
		<part name="result" element="tns:contentMetadata" />
	</message>
	
	
	<!-- *********************************** -->
	<!-- ********  basic interface  ******** -->
	<!-- *********************************** -->

	<portType name="daisy-online-basic">

		<operation name="logOn">
			<documentation>
				<db:para role="desc">Logs the Reading System on to the Service.</db:para>
			</documentation>
			<input message="tns:logOnRequest"/>
			<output message="tns:logOnResponse"/>
			<fault name="logOnInternalServerError" message="tns:InternalServerErrorFault"/>
		</operation>
		<operation name="logOff">
			<documentation>Logs the Reading System off the Service.</documentation>
			<input message="tns:logOffRequest"/>
			<output message="tns:logOffResponse"/>
			<fault name="logOffInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="logOffNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>

		<operation name="issueContent">
			<documentation>
				<db:para role="desc">Requests the issuance of the specified content</db:para>
			</documentation>
			<input message="tns:issueContentRequest"/>
			<output message="tns:returnContentResponse"/>
			<fault name="issueContentInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="issueContentNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="issueContentInvalidParameter" message="tns:InvalidParameterFault"/>
		</operation>

		<operation name="returnContent">
			<documentation>
				<db:para role="desc">Requests the return of the specified content</db:para>
				<db:para>
					<db:remark role="todo">Define how to handle this in purchase or other no-return
						situations. Does making optional fix it all?</db:remark>
				</db:para>
			</documentation>
			<input message="tns:returnContentRequest"/>
			<output message="tns:returnContentResponse"/>
			<fault name="returnContentInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="returnContentNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="returnContentInvalidParameter" message="tns:InvalidParameterFault"/>
		</operation>

		<operation name="setReadingSystemAttributes">
			<documentation>
				<db:para role="desc">Posts the attributes (characteristics) of the Reading System to
					the Service.</db:para>
			</documentation>
			<input message="tns:setReadingSystemAttributesRequest"/>
			<output message="tns:setReadingSystemAttributesResponse"/>
			<fault name="setReadingSystemAttributesInternalServerError"
				message="tns:InternalServerErrorFault"/>
			<fault name="setReadingSystemAttributesNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>

		<operation name="getContentList">
			<documentation>
				<db:para role="desc">Retrieves a list of available content.</db:para>
			</documentation>
			<input message="tns:getContentListRequest"/>
			<output message="tns:getContentListResponse"/>
			<fault name="getContentListInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getContentListNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>
		
		<operation name="getContentMetadata">
			<documentation>
				<db:para role="desc">Retrieves <db:xref linkend="tp_contentMetadata"/> for the specified content.</db:para>
			</documentation>
			<input message="tns:getContentMetadataRequest" />
			<output message="tns:getContentMetadataResponse" />
			<fault name="getContentMetadataInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getContentMetadataNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>
		
		<operation name="getServiceAnnouncements">
			<documentation>
				<db:para role="desc">Retrieves the announcements awaiting the User's attention from the Service.</db:para>
			</documentation>
			<input message="tns:getServiceAnnouncementsRequest"/>
			<output message="tns:getServiceAnnouncementsResponse"/>
			<fault name="getServiceAnnouncementsInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getServiceAnnouncementsNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>
		
		<operation name="markAnnouncementsAsRead">
			<documentation>
				<db:para role="desc">Marks the specified announcements as read.</db:para>
				<db:para role="prereq">This operation is only valid if a previous call to 
					<db:xref linkend="op_getServiceAnnouncements"/> has been made during the session.</db:para>
			</documentation>
			<input message="tns:markAnnouncementsAsReadRequest"/>
			<output message="tns:markAnnouncementsAsReadResponse"/>
			<fault name="markAnnouncementsAsReadInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="markAnnouncementsAsReadNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>
		
	</portType>

	<!-- ************************************** -->
	<!-- ********  advanced interface  ******** -->
	<!-- ************************************** -->

	<portType name="daisy-online-advanced">
		<operation name="setBookmarks">
			<documentation>
				<db:para role="desc">Request the storage of bookmarks for a Publication to the
					Service.</db:para>
				<db:para>Note that the publication identifier is embedded in the <db:xref
						linkend="tp_bookmarkSet"/> type.</db:para>
				<db:para>Note that this operation only supports the storage of bookmarks for one
					publication at a time.</db:para>
			</documentation>
			<input message="tns:setBookmarksRequest"/>
			<output message="tns:setBookmarksResponse"/>
			<fault name="setBookmarksInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="setBookmarksNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>
		<operation name="getBookmarks">
			<documentation>
				<db:para role="desc">Retrieves bookmarks for a Publication from the
					Service.</db:para>
			</documentation>
			<input message="tns:getBookmarksRequest"/>
			<output message="tns:getBookmarksResponse"/>
			<fault name="getBookmarksInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getBookmarksNotAuthorised" message="tns:NotAuthorisedFault"/>
			<fault name="getBookmarksInvalidParameter" message="tns:InvalidParameterFault"/>
		</operation>
		<operation name="getDateTime">
			<documentation>
				<db:para role="desc">Retrieves the current date and time from the Service.</db:para>
			</documentation>
			<input message="tns:getDateTimeRequest"/>
			<output message="tns:getDateTimeResponse"/>
			<fault name="getDateTimeInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getDateTimeNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>
		<operation name="setUserResponses">
			<documentation>
				<db:para role="desc">Posts user response(s) to a previous question to the Service.</db:para>
			</documentation>
			<input message="tns:setUserResponsesRequest"/>
			<output message="tns:setUserResponsesResponse"/>
			<fault name="setUserResponsesInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="setUserResponsesNotAuthorised" message="tns:NotAuthorisedFault"/>
		</operation>
		<operation name="getQuestion">
			<!-- was: getUserInput -->
			<documentation>
				<db:para role="desc">TODO</db:para>
			</documentation>
			<input message="tns:getQuestionRequest"/>
			<output message="tns:getQuestionResponse"/>
			<fault name="getQuestionInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getQuestionNotAuthorised" message="tns:NotAuthorisedFault"/>		
		</operation>
		<operation name="getMultipleChoiceQuestion">
			<!-- was: getUserChoices -->
			<documentation>
				<db:para role="desc">TODO</db:para>
			</documentation>
			<input message="tns:getMultipleChoiceQuestionRequest"/>
			<output message="tns:getMultipleChoiceQuestionResponse"/>
			<fault name="getMultipleChoiceQuestionInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getMultipleChoiceQuestionNotAuthorised" message="tns:NotAuthorisedFault"/>		
		</operation>
		<operation name="getGroupedQuestions">
			<documentation>
				<db:para role="desc">TODO</db:para>
			</documentation>
			<input message="tns:getGroupedQuestionsRequest"/>
			<output message="tns:getGroupedQuestionsResponse"/>
			<fault name="getGroupedChoiceQuestionsInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getGroupedChoiceQuestionsNotAuthorised" message="tns:NotAuthorisedFault"/>		
		</operation>
		<operation name="getMessage">
			<!-- was: getUserAnnouncement -->
			<documentation>
				<db:para role="desc">TODO</db:para>
			</documentation>
			<input message="tns:getMessageRequest"/>
			<output message="tns:getMessageResponse"/>
			<fault name="getMessageInternalServerError" message="tns:InternalServerErrorFault"/>
			<fault name="getMessageNotAuthorised" message="tns:NotAuthorisedFault"/>		
		</operation>
				
	</portType>

	
	<!-- ************************************** -->
	<!-- ********        faults        ******** -->
	<!-- ************************************** -->

	<message name="InternalServerErrorFault">
		<documentation>
			<db:para role="desc">An internal server error occurred on the Service and the execution
				of the operation was halted.</db:para>
		</documentation>
	</message>
	<message name="NotAuthorisedFault">
		<documentation>
			<db:para role="desc">The Reading System is not authorised to invoke this
				operation.</db:para>
		</documentation>
	</message>
	<message name="InvalidParameterFault">
		<documentation>
			<db:para role="desc">An invalid parameter was passed with the operation
				request.</db:para>
		</documentation>
	</message>
	<message name="InvalidOperationFault">
		<documentation>
			<db:para role="desc">The current context does not permit a call to this operation. (May
				make NotAuthorisedFault redundant)</db:para>
		</documentation>
	</message>

</definitions>
